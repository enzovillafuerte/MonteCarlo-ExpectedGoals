main = 'Equals to 12?'
)
## Task 4C. The average of the dice
hist(
df$Avg,
breaks = 10000,
main = 'Dice Avg Hist',
xlab='Avg',
)
# Task 4A - Simple histogram referencing the prod column
# Insight: By the level of aggregation (30) kinda follows a Poisson Distribution,outliers may be biasing though
hist(
df$Prod,
breaks = 30,
main = 'Dice Multiplication Hist',
xlab='Product',
)
## Task 4B. The number of times the roll equaled 12
# Bar Chart
barplot(
table(df$Equal), # by leveraging table we count the disticnt values from the column
main = 'Equals to 12?'
)
## Task 4C. The average of the dice
hist(
df$Avg,
breaks = 10,
main = 'Dice Avg Hist',
xlab='Avg',
)
# Task 4A - Simple histogram referencing the prod column
# Insight: By the level of aggregation (30) kinda follows a Poisson Distribution,outliers may be biasing though
hist(
df$Prod,
breaks = 30,
main = 'Dice Multiplication Hist',
xlab='Product',
)
## Task 4B. The number of times the roll equaled 12
# Bar Chart
barplot(
table(df$Equal), # by leveraging table we count the disticnt values from the column
main = 'Equals to 12?'
)
## Task 4C. The average of the dice
# Insight: clearly following normality
hist(
df$Avg,
breaks = 10,
main = 'Dice Avg Hist',
xlab='Avg',
)
## Task 4D. The SD of the dice
boxplot(
df$Std
)
# Task 4A - Simple histogram referencing the prod column
# Insight: By the level of aggregation (30) kinda follows a Poisson Distribution,outliers may be biasing though
hist(
df$Prod,
breaks = 30,
main = 'Dice Multiplication Hist',
xlab='Product',
)
## Task 4B. The number of times the roll equaled 12
# Bar Chart
barplot(
table(df$Equal), # by leveraging table we count the disticnt values from the column
main = 'Equals to 12?'
)
## Task 4C. The average of the dice
# Insight: clearly following normality
hist(
df$Avg,
breaks = 10,
main = 'Dice Avg Hist',
xlab='Avg',
)
## Task 4D. The SD of the dice
boxplot(
df$Std,
main = 'Std Box Plot'
)
# Task 4A - Simple histogram referencing the prod column
# Insight: By the level of aggregation (30) kinda follows a Poisson Distribution,outliers may be biasing though
hist(
df$Prod,
breaks = 30,
main = 'Dice Multiplication Hist',
xlab='Product',
)
## Task 4B. The number of times the roll equaled 12
# Bar Chart
barplot(
table(df$Equal), # by leveraging table we count the disticnt values from the column
main = 'Equals to 12?'
)
## Task 4C. The average of the dice
# Insight: clearly following normality
hist(
df$Avg,
breaks = 10,
main = 'Dice Avg Hist',
xlab='Avg',
)
## Task 4D. The SD of the dice
boxplot(
df$Std,
main = 'Std Box Plot'
ylab='Std'
# Task 4A - Simple histogram referencing the prod column
# Insight: By the level of aggregation (30) kinda follows a Poisson Distribution,outliers may be biasing though
hist(
df$Prod,
breaks = 30,
main = 'Dice Multiplication Hist',
xlab='Product',
)
## Task 4B. The number of times the roll equaled 12
# Bar Chart
barplot(
table(df$Equal), # by leveraging table we count the disticnt values from the column
main = 'Equals to 12?'
)
## Task 4C. The average of the dice
# Insight: clearly following normality
hist(
df$Avg,
breaks = 10,
main = 'Dice Avg Hist',
xlab='Avg',
)
## Task 4D. The SD of the dice
boxplot(
df$Std,
main = 'Std Box Plot',
ylab='Std'
)
NEWrollFair <- function(dice_num, v_inequality) {
die <- 1:6
dice <- sample(die, size=dice_num, replace=TRUE, prob=rep(1/6, 6))
dice_sum <- sum(dice) # storing the sum of the dice
### Task 1A
dice_prod <- prod(dice) # producto of the dice
# Task 1B
# creating equal variable as None/Null
equal = NULL
if (dice_sum == v_inequality){
equal <- TRUE
} else {
equal <- FALSE
}
# Task 1C - Averaging the Dice
dice_avg = dice_sum / dice_num
# Task 1D - Get the Standard Deviation
dice_std = sd(dice)
# Task 1E - Substract minimum die value from maximum (range?)
#dice_range = range(dice)
dice_range_diff = max(dice) - min(dice)
# Displaying Results
results <- list(Dice= dice, Sum=dice_sum, Prod=dice_prod,
Equal=equal, Avg=dice_avg, Std=dice_std,
Range_Diff=dice_range_diff) # storing results as a list for later indexing
return(results)
}
a = NEWrollFair(dice_num = 4, v_inequality=18)
NEWrollFair <- function(dice_num, v_inequality) {
die <- 1:6
dice <- sample(die, size=dice_num, replace=TRUE, prob=rep(1/6, 6))
dice_sum <- sum(dice) # storing the sum of the dice
### Task 1A
dice_prod <- prod(dice) # producto of the dice
# Task 1B
# creating equal variable as None/Null
equal = NULL
if (dice_sum == v_inequality){
equal <- TRUE
} else {
equal <- FALSE
}
# Task 1C - Averaging the Dice
dice_avg = dice_sum / dice_num
# Task 1D - Get the Standard Deviation
dice_std = sd(dice)
# Task 1E - Substract minimum die value from maximum (range?)
#dice_range = range(dice)
dice_range_diff = max(dice) - min(dice)
# Displaying Results
results <- list(Dice= dice, Sum=dice_sum, Prod=dice_prod,
Equal=equal, Avg=dice_avg, Std=dice_std,
Range_Diff=dice_range_diff) # storing results as a list for later indexing
return(results)
}
a = NEWrollFair(dice_num = 4, v_inequality=18)
set.seed(693020)
# Modifying initial NEWRollFair to handle 5-sided dice instead of 4
NEWrollFair <- function(dice_num, v_inequality, sides) {
die <- 1:sides
dice <- sample(die, size=dice_num, replace=TRUE, prob=rep(1/sides, sides))
dice_sum <- sum(dice) # storing the sum of the dice
### Task 1A
dice_prod <- prod(dice) # producto of the dice
# Task 1B
# creating equal variable as None/Null
equal = NULL
if (dice_sum == v_inequality){
equal <- TRUE
} else {
equal <- FALSE
}
# Task 1C - Averaging the Dice
dice_avg = dice_sum / dice_num
# Task 1D - Get the Standard Deviation
dice_std = sd(dice)
# Task 1E - Substract minimum die value from maximum (range?)
#dice_range = range(dice)
dice_range_diff = max(dice) - min(dice)
# Displaying Results
results <- list(Dice= dice, Sum=dice_sum, Prod=dice_prod,
Equal=equal, Avg=dice_avg, Std=dice_std,
Range_Diff=dice_range_diff) # storing results as a list for later indexing
return(results)
}
# Task 2A - REPLICATE
results_2a <- replicate(10000, NEWrollFair(dice_num=4, v_inequality=12, sides=5), simplify = FALSE)
# Task 2B - FOR LOOP
# we first need to create  a proper data structure to store the values
results_2b <- NULL
for (i in 1:10000) {
results_2b[[i]] <- NEWrollFair(dice_num=4, v_inequality=12, sides=5)
}
# creating the dataframe
# we'll use do.call to fix
# lapply function apply functions over each element of results_2b. Similar to lambda functions in Python
df <- do.call(rbind, lapply(results_2b, function(x) {
data.frame(Dice = I(list(x$Dice)), # using I here since a list should be stored in the first column, I believe this is why is displaying errors when trying different methods
Sum = x$Sum, # we use $ to access the specific column. for lambda python think of x['Sum'] df indexing
Prod = x$Prod,
Equal = x$Equal,
Avg = x$Avg,
Std = x$Std,
Range = x$Range)
}))
#displaying first few rows
head(df)
# Task 4A - Simple histogram referencing the prod column
# Insight: By the level of aggregation (30) kinda follows a Poisson Distribution,outliers may be biasing though
hist(
df$Prod,
breaks = 30,
main = 'Dice Multiplication Hist',
xlab='Product',
)
## Task 4B. The number of times the roll equaled 12
# Bar Chart
barplot(
table(df$Equal), # by leveraging table we count the disticnt values from the column
main = 'Equals to 12?'
)
## Task 4C. The average of the dice
# Insight: clearly following normality
hist(
df$Avg,
breaks = 10,
main = 'Dice Avg Hist',
xlab='Avg',
)
## Task 4D. The SD of the dice
boxplot(
df$Std,
main = 'Std Box Plot',
ylab='Std'
)
## Task 4E. The difference between the Maximum and Minimum dice
## Task 4F. The values for just the first die rolled.
hist(
df$Range,
breaks = 20, # Adjust the number of breaks as needed
main = 'Difference Between Maximum and Minimum Dice',
xlab = 'Max - Min'
)
hist(
df$Range,
breaks = 10,
main = 'Diff Max and Min Dice',
xlab = 'Max - Min'
)
print(df)
print(df[0])
print(df[0:1])
print(df)
print(df$Dice)
print(df$Dice[1])
print(df$Dice[0])
print(df$Dice[1])
print(df)
print(df$Dice[1])
print(df$Dice[[1]])
print(df$Dice[[1]][0])
print(df$Dice[[1]][1])
values for just the first die rolled.
hist(
df$Dice[[1]][1],
breaks = 30,
main = 'Tumama',
xlab = 'Count'
)
hist(
df$Dice[1],
breaks = 30,
main = 'Tumama',
xlab = 'Count'
)
hist(
df$Dice[[1]][1],
breaks = 30,
main = 'Tumama',
xlab = 'Count'
)
new_v <- c()
# looping to get only the value [1] from the Dice column
for (i in 1:length(df$Dice)){
new_v <- c(new_v, df$Dice[[i]][1])
}
print(new_v)
hist(
new_v,
breaks = 30,
main = 'Tumama',
xlab = 'Count'
)
hist(
new_v,
breaks = 10,
main = 'Tumama',
xlab = 'Count'
)
hist(
new_v,
breaks = 10,
main = 'Tumama',
xlab = 'Count'
)
hist(
df$Prod,
breaks = 30,
main = 'Dice Multiplication Hist',
xlab='Product',
)
hist(
new_v,
breaks = 10,
main = 'Tumama',
xlab = 'Count'
)
hist(
new_v,
breaks = 20,
main = 'Tumama',
xlab = 'Count'
)
hist(
new_v,
breaks = 100,
main = 'Tumama',
xlab = 'Count'
)
length(new_v)
hist(
new_v,
breaks = 10000,
main = 'Tumama',
xlab = 'Count'
)
length(new_v)
hist(
new_v,
breaks = 1,
main = 'Tumama',
xlab = 'Count'
)
length(new_v)
hist(
new_v,
breaks = 5,
main = 'Tumama',
xlab = 'Count'
)
length(new_v)
hist(
new_v,
breaks = 10,
main = 'Tumama',
xlab = 'Count'
)
length(new_v)
print(new_v)
hist(
new_v,
breaks = 5,
main = 'Tumama',
xlab = 'Count'
)
length(new_v)
hist(
new_v,
main = 'First Die per Dice',
xlab = 'Count'
)
print(df)
# Extract the first roll from each row in the Dice column
first_roll <- sapply(df$Dice, function(x) x[1])
# Get frequencies for the first roll using table()
roll_frequencies <- table(first_roll)
# Print the frequencies
print(roll_frequencies)
print(roll_frequencies)
sum_frequencies <- table(df$Sum)
print(sum_frequencies)
filtered_frequencies <- df$Sum[df$Sum <= 8 | df$Sum >= 16]
print(table(filtered_frequencies))
df$Dice
df$Dice
NEWrollFair <- function(dice_num, v_inequality) {
die <- 1:6
dice <- sample(die, size=dice_num, replace=TRUE, prob=rep(1/6, 6))
dice_sum <- sum(dice) # storing the sum of the dice
### Task 1A
dice_prod <- prod(dice) # producto of the dice
# Task 1B
# creating equal variable as None/Null
equal = NULL
if (dice_sum == v_inequality){
equal <- TRUE
} else {
equal <- FALSE
}
# Task 1C - Averaging the Dice
dice_avg = dice_sum / dice_num
# Task 1D - Get the Standard Deviation
dice_std = sd(dice)
# Task 1E - Substract minimum die value from maximum (range?)
#dice_range = range(dice)
dice_range_diff = max(dice) - min(dice)
# Displaying Results
results <- list(Dice= dice, Sum=dice_sum, Prod=dice_prod,
Equal=equal, Avg=dice_avg, Std=dice_std,
Range_Diff=dice_range_diff) # storing results as a list for later indexing
return(results)
}
a = NEWrollFair(dice_num = 2, v_inequality=18)
print(sum(df$Equal))
length(df)
length(df$Equal)
setwd('Documents/Github/MonteCarlo-ExpectedGoals')
data <- read.csv('BarcavsManUtd2011.csv')
data <- read.csv('BarcavsManUtd2011.csv')
data.head()
head(data)
columns(data)
data <- subset(data, 'shot_statsbomb_xg' != NULL)
len(data)
length(data)
data <- read.csv('BarcavsManUtd2011.csv')
length(data)
data <- subset(data, 'shot_statsbomb_xg' != NULL)
data <- read.csv('BarcavsManUtd2011.csv')
data <- subset(data, 'shot_statsbomb_xg' >= 0.00)
data <- subset(data, 'shot_statsbomb_xg' >= 0.00)
source("~/Documents/GitHub/MonteCarlo-ExpectedGoals/MonteCarlo_Project.R", echo=TRUE)
head(data)
data <- subset(data, 'shot_statsbomb_xg' != NA)
head(data)
data <- subset(data, 'shot_statsbomb_xg' != 'NA')
head(data)
data <- subset(data, !is.na(shot_statsbomb_xg))
data <- read.csv('BarcavsManUtd2011.csv')
data <- subset(data, !is.na(shot_statsbomb_xg))
data <- read.csv('BarcavsManUtd2011.csv')
data <- data[data$shot_statsbomb_xg != NULL]
data <- data[data$shot_statsbomb_xg != NULL]
data <- read.csv('BarcavsManUtd2011.csv')
data <- data[data$shot_statsbomb_xg != NULL]
data <- read.csv('BarcavsManUtd2011.csv')
data <- data[data$shot_statsbomb_xg >= 0.00]
data <- data[data$shot_statsbomb_xg >= 0.00, ]
data <- data[data$shot_statsbomb_xg != NA, ]
data <- data[data$shot_statsbomb_xg != NULL, ]
data <- data[data$shot_statsbomb_xg != NA, ]
data <- read.csv('BarcavsManUtd2011.csv')
data <- data[data$shot_statsbomb_xg != NA, ]
data <- data[!is.na(data$shot_statsbomb_xg), ]
data <- read.csv('BarcavsManUtd2011.csv')
data <- data[!is.na(data$shot_statsbomb_xg), ]
filter(data, shot_statsbomb_xg != NA)
head(data)
library(dplyr)
data <- data %>% filter(!is.na(shot_statsbomb_xg))
data <- read.csv('BarcavsManUtd2011.csv')
data <- data %>% filter(!is.na(shots_statsbomb_xg))
library(dplyr)
data <- read.csv('BarcavsManUtd2011.csv')
columns(data)
head(data)
data <- data %>% filter(!is.na(shot_statsbomb_xg))
colnames(data)
data <- read.csv('BarcavsManUtd2011.csv')
data <- data %>% filter(shot_statsbomb_xg != "NA")
str(data$shot_statsbomb_xg)
data$shot_statsbomb_xg <- as.numeric(data$shot_statsbomb_xg)
data <- data %>% filter(shot_statsbomb_xg != "NA")
head(data)
